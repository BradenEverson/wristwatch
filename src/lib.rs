use serde::{Deserialize, Serialize};

// Potential formula: Angle between line segment generated by elbow and wrist and wrist and middle
// finger joint (9)

pub const CENTER_FACE: usize = 0;
pub const RIGHT_EYE: usize = 15;
pub const RIGHT_EAR: usize = 17;
pub const LEFT_EYE: usize = 16;
pub const LEFT_EAR: usize = 18;
pub const STERNUM: usize = 1;
pub const RIGHT_SHOULDER: usize = 2;
pub const LEFT_SHOULDER: usize = 5;
pub const RIGHT_ELBOW: usize = 3;
pub const RIGHT_WRIST: usize = 4;

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct PoseData {
    version: f32,
    people: Vec<Person>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Person {
    person_id: Vec<i32>,
    pose_keypoints_2d: Vec<f32>,
    face_keypoints_2d: Vec<f32>,
    hand_left_keypoints_2d: Vec<f32>,
    hand_right_keypoints_2d: Vec<f32>,
    pose_keypoints_3d: Vec<f32>,
    face_keypoints_3d: Vec<f32>,
    hand_left_keypoints_3d: Vec<f32>,
    hand_right_keypoints_3d: Vec<f32>,
}

#[cfg(test)]
mod tests {
    use std::{fs::File, io::Read};

    use crate::PoseData;

    #[test]
    fn loading_soldering_example() {
        let mut buf = String::new();
        let mut file = File::open("files/soldering.json").expect("Load Soldering");
        file.read_to_string(&mut buf).expect("Read to buf");

        let pose: PoseData = serde_json::from_str(&buf).expect("Failed to parse");
        panic!("{pose:?}")
    }
}
